# OCurl - HTTP Client Specification

## Overview

OCurl is a command-line HTTP client designed for API testing and automation. It uses plain text files for request definition with variable substitution and environment management.

## Installation

```bash
# From source (OCaml required)
git clone https://github.com/LUSEDOU/ocurl
make && make install

# Via OPAM
opam install ocurl
```

## File Format

### Basic Structure
`.http` files contain environments, variables, and requests separated by `###`:

```http
@envfile .env

@environment production
Host: api.company.com
@ApiVersion = v2

@environment staging
Host: staging.company.com
@ApiVersion = v1

###
@name get_users
GET /api/{{ApiVersion}}/users

###
@name create_user
POST /api/{{ApiVersion}}/users
Content-Type: application/json

{"name": "{{name}}", "email": "{{email}}"}
```

### Syntax Elements

**Environment Blocks**:
```http
@environment name
Variable: header_value    // Applies to all requests
@Variable = value        // Variable declaration
```

**Variable Usage**:
```http
GET /api/{{Variable}}/resource
Header: {{Variable}}
```

**Global Variables**:
```http
@Variable = value        // Applies to all environments and requests
Header: HeaderValue      // Applies globally

@environment dev // Overrides for dev environment
@Variable = dev_value
```

**Escaping**: `\{{variable}}` renders as literal `{{variable}}`

**Header Removal**:
```http
HeaderName:              // Removes inherited header
```

**File Import**:
```http
@import ./auth.http      // Concatenates file content, could be any file (.http, .txt, .log, etc.)
```

**.env Files**:
```env
API_KEY=sk_live_123
DB_HOST=localhost
```

That can be imported using `@envfile .env`.


Syntax follows `KEY=VALUE` per line. Note: that comments or `KEY:"VALUE` syntax are not supported in `.env` files.
Syntax of the importing is `@envfile ./path/to/file.env`.


### Lazy Variables & Response Chaining

```http
###
@name login
POST /auth/login
{"username": "{{user}}", "password": "{{password}}"}

@access_token = {{ login.response.body | jq '.access_token' }}
@user_id = {{ login.response.body | jq '.user.id' }}

###
@name get_profile
GET /api/users/{{user_id}}
Authorization: Bearer {{access_token}}
```

**Response Access**:
- `[name].response.status` - HTTP status code
- `[name].response.body` - Response body
- `[name].response.headers` - All headers
- `[name].response.headers.HeaderName` - Specific header

## Command Line Interface

### Core Commands
```bash
# Single request execution
ocurl api.http -e production -n get_users

# Multiple environments (right-to-left precedence)
ocurl api.http -e base -e user1 -e production -n request

# Variable overrides
ocurl api.http -e production -n create_user -v name=John -v email=john@company.com

# Bulk input processing
echo "user1 pass1" | ocurl auth.http -n login with user,password
cat users.csv | ocurl api.http -n create_user with name,email,department

# Custom separators
echo "value1;value2" | ocurl api.http -n request with var1,var2 --separator ";"
echo "value1;value2" | ocurl api.http -n request with;var1,var2
```

### Flags
- `-e, --environment` - Select environment(s)
- `-n, --name` - Select request by name
- `-v, --var` - Set variable values
- `--with` - Bulk variable input
- `--separator` - Custom input separator (default: space)
- `--envfile` - Load environment variables from file

## Resolution Rules

1. **Environment Precedence**: Command line > Right environment > Left environment > Imported > Base
2. **Variable Scope**: Request > Environment > Imported > Base
3. **Header Inheritance**: Environment headers apply to all requests unless overridden or removed
4. **Lazy Evaluation**: Variables with pipes evaluate when used, not when declared
5. **Import Behavior**: Files are concatenated, name conflicts use last definition

## Tool Ecosystem

### ocurl-list - Endpoint Analysis

**Output Format** (S-expression):
```
(variables
  (bookId 13)
  (jwt
    (references login)
    (values (login.response.body | jq '.token'))
  )
)

(environment
  (name "production")
  (variables (
    (host "api.com")
  ))
)

(environment
  (name "dev")
  (variables (
    (host "localhost:8080")
  ))
)

(request
  (name "login")
  (method "POST")
  (path "/login")
  (dependencies (host user password))
)

(request
  (name "getBook")
  (method "GET")
  (path "/books/{{bookId}}")
  (headers (
    (Authorization "Bearer {{jwt}}")
  ))
  (dependencies (host bookId jwt))
)
```

**Usage**:
```bash
ocurl-list api.http                    # List endpoints
ocurl-list api.http --dependencies     # Show dependency graph
ocurl-list api.http --requirements     # List required variables
ocurl-list api.http --execution-order  # Show execution sequence
```

### ocurl-compare - Response Analysis

**Structural Comparison**:
```bash
ocurl api.http -e v1 -n endpoint | ocurl-compare structural --baseline v2_response.json
```

**Output**:
```
Added paths: $.users[*].metadata
Removed paths: $.users[*].legacy_id
Modified paths: $.users[*].name (string -> object)
```

**Patch Generation**:
```bash
ocurl-compare patch old.json new.json > changes.patch
```

**Patch Format**:
```
--- old.json
+++ new.json
@@ -1,7 +1,8 @@
 {
   "users": [
     {
-      "id": "{{any}}"
+      "id": "{{any}}",
+      "metadata": "{{any}}"
     }
   ]
 }
```

## Examples

### Authentication Flow
```http
# auth.http
@environment production
Host: auth.company.com

###
@name login
POST /oauth/token
{"username": "{{user}}", "password": "{{password}}"}
@token = {{ login.response.body | jq '.access_token' }}

###
@name refresh
POST /oauth/token
{"refresh_token": "{{refresh_token}}"}
```

```bash
echo "user pass" | ocurl auth.http -e production -n login with user,password | \
  jq -r '.access_token' | \
  ocurl api.http -e production -n protected_request with token
```

### Multi-Environment Testing
```http
# users.http
@environment admin
@user = admin@company.com
@role = admin

@environment user
@user = user@company.com
@role = user

###
@name create_item
POST /api/items
{"created_by": "{{user}}", "role": "{{role}}"}
```

```bash
for env in admin user; do
  ocurl users.http -e production -e $env -n create_item
done
```

### Complex Workflow
```http
# workflow.http
@environment production
Host: api.company.com

###
@name create_project
POST /api/projects
{"name": "{{project_name}}"}
@project_id = {{ create_project.response.body | jq '.id' }}

###
@name add_member
POST /api/projects/{{project_id}}/members
{"user_id": "{{user_id}}"}
@member_id = {{ add_member.response.body | jq '.id' }}

###
@name verify
GET /api/projects/{{project_id}}/members/{{member_id}}
```

```bash
echo "Project1 123" | ocurl workflow.http -e production with project_name,user_id
```

## Technical Specifications

### Supported Pipe Commands
- `jq` - JSON processing
- Additional commands may be added

### Error Handling
- Missing variables: Error before execution
- Failed requests: Dependent requests fail
- Pipe command failures: Variable evaluation fails
- Circular dependencies: Detection and error

### Execution Model
1. Parse file and build dependency graph
2. Resolve environments and variables
3. Execute requests in dependency order
4. Evaluate lazy variables when dependencies are available
5. Cache responses for reuse in same execution

## Limits & Boundaries

### Excluded Features
- No automatic authentication flows
- No implicit variable resolution across files
- No complex flow control (if/retry/parallel)
- No built-in assertion framework
- No GUI interface

### Security Constraints
- No credential storage or management
- No automatic token refresh
- No encrypted configuration files

### Performance Characteristics
- Linear execution by default
- Response caching within single execution
- No persistent session state between runs

## Project Structure
```
project/
├── http/
│   ├── api.http
│   ├── auth.http
│   ├── environments/
│   │   ├── production.env
│   │   └── development.env
│   └── workflows/
│       └── user_onboarding.http
└── scripts/
    └── test_suite.sh
```

This specification defines the complete behavior and capabilities of OCurl. All implementations must adhere to these rules and interfaces.
